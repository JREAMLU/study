// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: s1.proto

/*
Package s1 is a generated protocol buffer package.

It is generated from these files:
	s1.proto

It has these top-level messages:
	AHelloRequest
	AHelloResponse
*/
package s1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for S1 service

type S1Service interface {
	AHello(ctx context.Context, in *AHelloRequest, opts ...client.CallOption) (*AHelloResponse, error)
}

type s1Service struct {
	c           client.Client
	serviceName string
}

func S1ServiceClient(serviceName string, c client.Client) S1Service {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "s1"
	}
	return &s1Service{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *s1Service) AHello(ctx context.Context, in *AHelloRequest, opts ...client.CallOption) (*AHelloResponse, error) {
	req := c.c.NewRequest(c.serviceName, "S1.AHello", in)
	out := new(AHelloResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for S1 service

type S1Handler interface {
	AHello(context.Context, *AHelloRequest, *AHelloResponse) error
}

func RegisterS1Handler(s server.Server, hdlr S1Handler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&S1{hdlr}, opts...))
}

type S1 struct {
	S1Handler
}

func (h *S1) AHello(ctx context.Context, in *AHelloRequest, out *AHelloResponse) error {
	return h.S1Handler.AHello(ctx, in, out)
}
